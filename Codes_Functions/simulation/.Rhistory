#13
ggplot(data=df, aes(price))+
geom_boxplot()+
facet_wrap(~cut)
ggplot(data=df, aes(price_per_carat))+
geom_histogram()+
facet_wrap(~cut)
#14
sd=sd(df$price)
#14
st_dev=sd(df$price)
rm(sd)
#13
ggplot(data=df, aes(price))+
geom_boxplot()+#14
st_dev=sd(df$price)
#13
ggplot(data=df, aes(price))+
geom_boxplot()
#13
ggplot(data=df, aes(price))+
geom_boxplot()+
facet_wrap(~cut)
#13
ggplot(data=df, aes(price,fill=cut))+
geom_boxplot()+
#14
st_dev=sd(df$price)
#13
ggplot(data=df, aes(price,fill=cut))+
geom_boxplot()
#13
ggplot(data=df, aes(y=price,fill=cut))+
geom_boxplot()
conf_int=c(mean_price+1.96*st_dev,mean_price+1.96*st_dev)
conf_int=c(mean_price-1.96*st_dev,mean_price+1.96*st_dev)
sumarry(df)
sumarry(df)
sumary(df)
summary(df)
t.test(df$cut="Fair")
t.test(df[df$cut="Fair",])
t.test(df[df$cut="Fair"])
t.test(df[df$cut=="Fair",])
t.test(df[df$cut=="Fair"])
t.test(df$price[df$cut=="Fair"])
t.test(df$price[df$cut=="Ideal"])
#14
st_dev=sd(df$price[df$cut=="Ideal"])
#14
st_dev=sd(df$price[df$cut=="Ideal"])
se=st_dev/nrow(df[df$cut=="Ideal"])
se=st_dev/nrow(df[df$cut=="Ideal"])
se=st_dev/nrow(df[df$cut=="Ideal",])
conf_int=c(mean(df$price[df$cut=="Ideal"])
-1.96*se,mean(df$price[df$cut=="Ideal"])
+1.96*se)
se=st_dev/sqrt(nrow(df[df$cut=="Ideal",]))
conf_int=c(mean(df$price[df$cut=="Ideal"])-1.96*se,mean(df$price[df$cut=="Ideal"])+1.96*se)
t.test(df$price[df$cut=="Ideal"])
conf_int=c(mean(df$price[df$cut=="Ideal"])-1.96*se,mean(df$price[df$cut=="Ideal"])+1.96*se)
#14
st_dev=sd(df$price[df$cut=="Ideal"])
se=st_dev/sqrt(nrow(df[df$cut=="Ideal",]))
conf_int=c(mean(df$price[df$cut=="Ideal"])-1.96*se,mean(df$price[df$cut=="Ideal"])+1.96*se)
t.test(df$price[df$cut=="Ideal"])
#15
?t.test
t.test(df[df$cut=="Ideal",],mu=4150)
t.test(df$price[df$cut=="Ideal",],mu=4150)
t.test(df$price[df$cut=="Ideal"],mu=4150)
df$price[df$cut=="Ideal"]
t.test(df$price[df$cut=="Ideal"],mu=4150)
t.test(df$price[df$cut=="Fair"],mu=4150)
ggplot(data=df, aes(price_per_carat,color=cut))+
geom_histogram()+
facet_wrap(~cut)
ggplot(data=df, aes(price_per_carat,fill=cut))+
geom_histogram()+
facet_wrap(~cut)
View(df)
#11
ggplot(data=df, aes(x=price,y=carat))+
geom_point()+
facet_wrap(~clarity)
library(ggplot2)
df=diamonds
?diamonds
nrow(df)
# 1 : 53940 observation is there
#  2: 10 variables
summary(df)
ncol(df)
# 3 classes of each variable
sapply(df,class)
# 4 : how many ideal fair ...
summary(df$cut)
nrow(df$cut)
# 5 price:
hist(df$price)
df$price=as.numeric(df$price)
##
factors=  c("Fair","Good", "Very Good","Premium","Ideal")
for (i in factors){
mean(df$price[df$cut==i])
}
for (i in factors){
prin(mean(df$price[df$cut==i]))
}
print(mean(df$price[df$cut==i]))
for (i in factors){
print(mean(df$price[df$cut==i]))
}
#10:
mean(df$price[df$cut=="Fair"])
k≈übrary(tidyverse)
library(tidyverse)
finishTime <- function(n, ter=150){
rt <- ter + sum(round(rexp(n, rate=1/50)))
return(rt)
}
accuracy <- function(cue, n){
rt <- finishTime(n)
acc <- ifelse(rt < cue, ifelse(n==3, .95, .8), rbinom(1, 1, .5))
return(acc)
}
listSize <- rep(c(rep(3, 600), rep(6, 600)), 2)
cueTime <- rep(rep(c(100, 150, 200, 300, 400, 500, 600, 800), 1500), 2)
data <- data.frame(listSize=listSize, cueTime=cueTime)
head(data); tail(data)
table(data$listSize, data$cueTime)
data$acc <- unlist(lapply(1:nrow(data), function(i){accuracy(data$cueTime[i], data$listSize[i])}))
finishTime <- function(n, ter=150){
rt <- ter + sum(round(rexp(n, rate=1/50)))
return(rt)
}
accuracy <- function(cue, n){
rt <- finishTime(n)
acc <- ifelse(rt < cue, ifelse(n==3, .95, .8), rbinom(1, 1, .5))
return(acc)
}
listSize <- rep(c(rep(3, 600), rep(6, 600)), 2)
cueTime <- rep(rep(c(100, 150, 200, 300, 400, 500, 600, 800), 1500), 2)
data <- data.frame(listSize=listSize, cueTime=cueTime)
head(data); tail(data)
table(data$listSize, data$cueTime)
data$acc <- unlist(lapply(1:nrow(data), function(i){accuracy(data$cueTime[i], data$listSize[i])}))
e <- aggregate(list(acc=data$acc), list(cue=data$cue, setsize=data$listSize), mean); e
par(mfrow=c(2,2))
interaction.plot(e$cue, e$setsize, e$acc, col=1:2, lwd=3, lty=1, type='b', pch=1)
interaction.plot(e$cue, e$setsize, e$acc lwd=3, lty=1, type='b', pch=1)
interaction.plot(e$cue, e$setsize, e$acc, lwd=3, lty=1, type='b', pch=1)
interaction.plot(e$cue, e$setsize, e$acc, lwd=3, lty=1, type='b', pch=1)
interaction.plot(e$cue, e$setsize, e$acc, col=1:2, lwd=3, lty=1, type='b', pch=1)
par(mfrow=c(2,2))
interaction.plot(e$cue, e$setsize, e$acc, col=1:2, lwd=3, lty=1, type='b', pch=1)
---
title: "week12rTD"
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
## R Markdown
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r cars}
summary(cars)
summary(cars)
## Including Plots
You can also embed plots, for example:
```{r pressure, echo=FALSE}
plot(pressure)
plot(pressure)
```{r pressure, echo=FALSE}
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
plot(pressure)
plot(pressure)
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
```{r cars}
summary(cars)
summary(cars)
## Including Plots
You can also embed plots, for example:
```{r pressure, echo=FALSE}
plot(pressure)
plot(pressure)
---
title: "R session 12"
date: "2023-01-10"
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
## R Markdown
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
Firs, load the dataset:
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
Firs, load the dataset:
```{r }
data("Salaries", package = "carData")
## Distribution of the salaries
You can also embed plots, for example, plot the distribution  of the salaries (don't forget to lead ggplot2):
```{r , echo=FALSE, warning = FALSE}
library(ggplot2)
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
Does the distribution look normal?
This is often the case with salaries. Something that is often done is to log transform the salary variable.
```{r}
df=data("Salaries", package = "carData")
df=data("Salaries", package = "carData")
data("Salaries", package = "carData")
df=data("Salaries", package = "carData")
data("Salaries", package = "carData")
df=cars
View(df)
df=Salaries
View(Salaries)
View(Salaries)
ggplot(data=df,aes(y=salary))+
geom_histogram()
ggplot(data=df,aes(x=salary))+
geom_histogram()
ggplot(data=df,aes(x=log(salary)))+
geom_histogram()
ggplot(data=df,aes(x=log(salary),color=sex))+
geom_histogram()
ggplot(data=df,aes(x=log(salary),fill=sex))+
geom_histogram()
ggplot(data=df,aes(x=log(salary),color=sex))+
geom_histogram()
ggplot(data=df,aes(x=log(salary),color=sex))+
geom_histogram(aes(fill=sex))
ggplot(data=df,aes(x=log(salary))+
ggplot(data=df,aes(x=log(salary)))+
geom_histogram(aes(fill=sex))
ggplot(data=df,aes(x=log(salary)))+
ggplot(data=df,aes(x=log(salary),color=sex))+
geom_histogram()
ggplot(data=df,aes(x=log(salary))+
ggplot(data=df,aes(x=log(salary)))+
geom_histogram()
ggplot(data=df,aes(x=log(salary)))+
ggplot(data=df,aes(x=log(salary)+
ggplot(data=df,aes(x=log(salary)))+
geom_histogram()
ggplot(data=df,aes(x=log(salary)))+
ggplot(data=df,aes(x=log(salary)))+
geom_histogram()
ggplot(data=df,aes(x=log(salary)))+
geom_histogram(aes(fill=color))
ggplot(data=df,aes(x=log(salary)))+
geom_histogram(aes(fill=sex))
View(df)
nrwos(df$sex==Male)
nrwo(df$sex==Male)
nrows(df$sex==Male)
nrow(df$sex==Male)
nrow(df$sex=="Male")
nrows(df$sex=="Male")
nrows(df$sex=="Male")
nrows(df$sex=="Male")
nrow(df$sex=="Male")
nrow(Salaries$sex=="Male")
df
nrow(df[df$sex=="Male",])
nrow(df[df$sex=="Female",])
print("female ",nrow(df[df$sex=="Female",]))
print("female ",as.string(nrow(df[df$sex=="Female",]))
print("female ",as.string(nrow(df[df$sex=="Female",]))
nrow(df[df$sex=="Female",])
nrow(df[df$sex=="Female",])
print("female")
nrow(df[df$sex=="Male",])
nrow(df[df$sex=="Female",])
print("female")
nrow(df[df$sex=="Male",])
nrow(df[df$sex=="Female",])
print("female")
nrow(df[df$sex=="Male",])
nrow(df[df$sex=="Female",])
t.test(maleSalary~femaleSalary)
maleSalary=df[df$sex=="Male",]
femaleSalary=df[df$sex=="Female",]
t.test(maleSalary~femaleSalary)
t.test(maleSalary~femaleSalary)
maleSalary=df$salary[df$sex=="Male",]
femaleSalary=df$salary[df$sex=="Female",]
femaleSalary=df$salary[df$sex=="Female"]
maleSalary=df$salary[df$sex=="Male"]
femaleSalary=df$salary[df$sex=="Female"]
t.test(maleSalary~femaleSalary)
View(Salaries)
t.test(maleSalary~femaleSalary)
t.test(maleSalary~femaleSalary)
mean(maleSalary)
mean(femaleSalary)
mean(maleSalary)
t.test(mean(maleSalary)~mean(femaleSalary))
t.test(df$salary~df$sex)
t.test(mean(maleSalary)~mu=mean(femaleSalary))
t.test(mean(maleSalary),mu=mean(femaleSalary))
t.test(maleSalary,mu=mean(femaleSalary))
t.test(maleSalary,mu=femaleSalary)
t.test(maleSalary,mu=mean(femaleSalary))
df
ggplot(data=df,aes(x=yrs.since.phd,y=salary))
ggplot(data=df,aes(x=yrs.since.phd,y=salary))+
geom_point()
ggplot(data=df,aes(x=yrs.since.phd,y=salary))+
geom_point()+
geom_smooth(method="lm")
t.test(df$salary~df$sex)
ggplot(data=df,aes(x=yrs.since.phd,y=salary))+
geom_point()+
geom_smooth(method="lm", formula = y ~ x + I(x^2))
ggplot(data=df,aes(x=yrs.since.phd,y=salary))+
geom_point()
ggplot(data=df,aes(x=yrs.since.phd,y=log(salary)))+
geom_point()
ggplot(data=df,aes(x=yrs.since.phd,y=log(salary)))+
geom_point()
geom_smooth(method="lm")
ggplot(data=df,aes(x=yrs.since.phd,y=salary, fill=rank))+
geom_point()+
geom_smooth(method="lm", formula = y ~ x + I(x^2))
ggplot(data=df,aes(x=yrs.since.phd,y=log(salary)))+
geom_point()
ggplot(data=df,aes(x=yrs.since.phd,y=salary, color=rank))+
geom_point()+
geom_smooth(method="lm", formula = y ~ x + I(x^2))
mean(df$salary[df$rank=="AsstProf",])
df
mean(df$salary[df$rank=="AsstProf"],)
mean(df$salary[df$rank=="AsstProf"],)
df$salary[df$rank=="AsstProf",]
df$salary[df$rank=="AsstProf"],
df$salary[df$rank=="AsstProf"]
mean(df$salary[df$rank=="AsstProf"])
mean(df$salary[df$rank=="AsstProf"])
ggplot(data=df,aes(x=rank,y=salary))+
geom_boxplot()
ggplot(data=df,aes(x=rank,y=salary))+
geom_boxplot(aes(fill=rank))
lm(df$salary~df$rank)
summary(lm)
summary(lm(df$salary~df$rank))
summary(lm(df$rank~df$slary))
summary(lm(df$rank~df$salary))
summary(lm(df$salary~df$rank))
?aggregate
aggregate(data=df,salary~rank)
aggregate(data=df,salary,rank)
aggregate(data=df,mean,salary~rank)
aggregate(data=df,salary~rank,salary)
aggregate(data=df,salary~rank,mean)
summary(lm(df$salary~df$rank*df$sex))
summary(lm(log(df$salary)~log(df$rank)))
summary(lm(df$log(salary)~log(df$rank)))
summary(lm(df$salary~log(df$rank)))
summary(lm(log(df$salary)~df$rank))
## it compares the each rank category to one its not shown here which is assistant prof
## If I want to compare each of the factors together I need to do an ANOVA
## So this is onef of negative side of LM
lm(log(df$salary)~df$rank)
summary(lm(log(df$salary)~df$rank))
## it compares the each rank category to one its not shown here which is assistant prof
## If I want to compare each of the factors together I need to do an ANOVA
## So this is onef of negative side of LM
lm(log(df$salary)~df$rank)
summary(lm(log(df$salary)~df$rank))
ggplot(data=df,aes(x=log(salary)))+
geom_histogram(aes(fill=sex),position_dodge())
ggplot(data=df,aes(x=log(salary)))+
geom_histogram(aes(fill=sex))+
position_dodge())
ggplot(data=df,aes(x=log(salary)))+
geom_histogram(aes(fill=sex),position=dodge)+
```
ggplot(data=df,aes(x=log(salary)))+
geom_histogram(aes(fill=sex),position="dodge2")+
```
ggplot(data=df,aes(x=log(salary)))+
geom_histogram(aes(fill=sex),(position="dodge2"))+
```
ggplot(data=df,aes(x=log(salary)))+
geom_histogram(aes(fill=sex))+
(position="dodge2"))
ggplot(data=df,aes(x=log(salary)))+
geom_histogram(aes(fill=sex))+
geom_bar(position="dodge2"))
ggplot(data=df,aes(x=log(salary)))+
geom_histogram(aes(fill=sex))+
geom_bar(position="dodge2")
ggplot(data=df,aes(x=log(salary)))+
geom_histogram(position="dodge2",aes(fill=sex))+
geom_bar()
ggplot(data=df,aes(x=log(salary)))+
geom_histogram(position="dodge",aes(fill=sex))+
```
ggplot(data=df,aes(x=log(salary)))+
geom_histogram(position="dodge2",aes(fill=sex))+
```
ggplot(data=df,aes(x=log(salary)))+
geom_histogram(position="dodge2",aes(fill=sex))+
```
ggplot(data=df,aes(x=log(salary)))+
geom_histogram(position="dodge2",aes(fill=sex))
ggplot(data=df,aes(x=log(salary)))+
geom_histogram(position="dodge2",aes(fill=sex))
ggplot(data=df,aes(x=log(salary)))+
geom_histogram(position="dodge",aes(fill=sex))
ggplot(data=df,aes(x=log(salary)))+
geom_histogram(position="dodge0.4",aes(fill=sex))
ggplot(data=df,aes(x=log(salary)))+
geom_histogram(position="dodge",aes(fill=sex))
summary(lm(df$salary~df$rank+df$sex))
summary(lm(df$salary~df$rank*df$sex))
summary(lm(df$salary~df$rank+df$sex))
# Sample proportions
p1 <- 0.45
p2 <- 0.72
# Sample sizes
n1 <- 7000
# Sample proportions
p1 <- 0.45
p2 <- 0.72
# Sample sizes
n1 <- 7000
n2 <- 7500
# Difference in sample proportions
diff <- p2 - p1
# Standard error
se <- sqrt((p1*(1-p1))/n1 + (p2*(1-p2))/n2)
# Calculate the critical value for a 95% confidence level
critical_value <- qnorm(0.975)
# Calculate the lower and upper bounds of the confidence interval
lower_bound <- diff_prop - (SE * critical_value)
upper_bound <- diff_prop + (SE * critical_value)
# Print the confidence interval
cat("95% Confidence Interval: [", lower_bound, ",", upper_bound, "]")
# Difference in sample proportions
diff_prop  <- p2 - p1
# Standard error
se <- sqrt((p1*(1-p1))/n1 + (p2*(1-p2))/n2)
# Calculate the critical value for a 95% confidence level
critical_value <- qnorm(0.975)
# Calculate the lower and upper bounds of the confidence interval
lower_bound <- diff_prop - (SE * critical_value)
upper_bound <- diff_prop + (SE * critical_value)
# Print the confidence interval
cat("95% Confidence Interval: [", lower_bound, ",", upper_bound, "]")
# Standard error
SE <- sqrt((p1*(1-p1))/n1 + (p2*(1-p2))/n2)
# Calculate the critical value for a 95% confidence level
critical_value <- qnorm(0.975)
# Calculate the lower and upper bounds of the confidence interval
lower_bound <- diff_prop - (SE * critical_value)
upper_bound <- diff_prop + (SE * critical_value)
# Print the confidence interval
cat("95% Confidence Interval: [", lower_bound, ",", upper_bound, "]")
# Calculate the lower and upper bounds of the confidence interval
lower_bound <- diff_prop - (SE * critical_value)
# Calculate the critical value for a 95% confidence level
critical_value <- qnorm(0.95)
# Calculate the lower and upper bounds of the confidence interval
lower_bound <- diff_prop - (SE * critical_value)
upper_bound <- diff_prop + (SE * critical_value)
# Print the confidence interval
cat("95% Confidence Interval: [", lower_bound, ",", upper_bound, "]")
#####
# Define the sample size, mean, and standard deviation for men and women
n1 <- 382 # sample size for men
mean1 <- 9.1 # mean for men
sd1 <- 10.6 # standard deviation for men
n2 <- 461 # sample size for women
mean2 <- 13.2 # mean for women
sd2 <- 11.5 # standard deviation for women
# Calculate the difference between population means
diff_pop_mean <- mean2 - mean1
# Calculate the estimated standard error of the sample difference
se <- sqrt((sd1^2/n1)+(sd2^2/n2))
# Calculate the critical value for a 99% confidence level
critical_value <- qnorm(0.995)
# Calculate the estimated standard error of the sample difference
se <- sqrt((sd1*sd1/n1)+(sd2*sd2/n2))
# Calculate the estimated standard error of the sample difference
ste <- sqrt((sd1*sd1/n1)+(sd2*sd2/n2))
ste
# Calculate the critical value for a 99% confidence level
critical_value <- qnorm(0.995)
# Calculate the lower and upper bounds of the confidence interval
lower_bound <- diff_pop_mean - (critical_value * se)
upper_bound <- diff_pop_mean + (critical_value * se)
# Print the difference between population means, the estimated standard error of the sample difference, and the 99% confidence interval
cat("Difference between population means: ", diff_pop_mean, "\n")
cat("Estimated standard error of the sample difference: ", se, "\n")
cat("99% Confidence Interval: [", lower_bound, ",", upper_bound, "]")
setwd("~/Omer_Repos/Internship Pascal/Expectation_Shapes_Perceived_Time/Codes_Functions/simulation")
setwd("~/Omer_Repos/Internship Pascal/Expectation_Shapes_Perceived_Time/Codes_Functions/simulation")
load('sims_power_exp1_4Omer')
View(data.point)
sd(data.point)
sd(data.point$temp_error)
View(data.point)
summary(data.point)
View(data.point)
sd(data.point$temp_error)
df=data.point
View(df)
View(data.point)
View(data.point)
